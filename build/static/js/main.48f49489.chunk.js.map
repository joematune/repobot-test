{"version":3,"sources":["assets/github_logo.svg","store.ts","queries.ts","components/JokeButton.tsx","components/CategoryList.tsx","App.tsx","index.tsx"],"names":["module","exports","initialState","jokes","text","categories","reducer","state","action","type","payload","createContainer","useReducer","Provider","useTrackedState","useDispatch","useUpdate","GET_ALL_CATEGORIES","gql","GET_A_JOKE","StyledButton","styled","button","JokeButton","variables","useQuery","loading","refetch","dispatch","disabled","onClick","then","data","joke","value","catch","error","console","category","CategoryList","useState","firstLoad","setFirstLoad","useEffect","map","index","key","StyledH1","h1","StyledHr","hr","StyledContainer","div","StyledCard","StyledCardContent","StyledGitHubAnchor","a","StyledGitHubImg","img","App","position","length","role","aria-label","href","title","target","src","github_logo","alt","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","document","getElementById"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,yC,oKCgBrCC,EAAsB,CACxBC,MAAO,CACH,CACIC,KAAM,iCAGdC,WAAY,IAGVC,EAAU,SAACC,EAAcC,GAC3B,OAAOA,EAAOC,MACV,IAAK,WACD,OAAO,2BACAF,GADP,IAEIJ,MAAM,GAAD,mBACEI,EAAMJ,OADR,CAED,CACIC,KAAMI,EAAOE,aAI7B,IAAK,eACD,OAAO,2BACAH,GADP,IAEIF,WAAW,GAAD,mBAAME,EAAMF,YAAZ,YAA2BG,EAAOE,YAEpD,QACI,OAAOH,I,EAUfI,aANa,kBAAMC,qBAAWN,EAASJ,MAGzCW,E,EAAAA,SACAC,E,EAAAA,gBACWC,E,EAAXC,U,gTCjDK,IAAMC,EAAqBC,cAAH,KAQlBC,EAAaD,cAAH,K,ysBCJvB,IAAME,EAAeC,IAAOC,OAAV,KAyDHC,EAjBI,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,UAAoC,EAE3BC,mBAASN,EAAY,CAAEK,UAAWA,IAAtDE,EAF+C,EAE/CA,QAASC,EAFsC,EAEtCA,QACVC,EAAWb,IAGjB,OACI,gBAACK,EAAD,CAAcS,SAAUH,EAASI,QAAS,WACtCH,IACCI,MAAK,gBAAEC,EAAF,EAAEA,KAAF,OAA2BJ,EAAS,CAAEnB,KAAM,WAAYC,QAASsB,EAAKC,KAAKC,WAChFC,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,QAE7BZ,EAAUc,WCzBRC,EA5BM,WAAmB,MAELd,mBAASR,GAAjCS,EAF6B,EAE7BA,QAASU,EAFoB,EAEpBA,MAAOJ,EAFa,EAEbA,KAFa,EAIFQ,oBAAS,GAJP,mBAI7BC,EAJ6B,KAIlBC,EAJkB,KAK9Bd,EAAWb,IACXR,EAAQO,IASd,OAPA6B,qBAAU,WACFF,GAAaT,IACbJ,EAAS,CAAEnB,KAAM,eAAgBC,QAASsB,EAAK3B,aAC/CqC,GAAa,MAElB,CAACD,EAAWT,EAAMJ,IAEjBF,EAAgB,oDAChBU,EAAc,iEAAsC,6BAAtC,qBACoB,8CAGlC,6BACK7B,EAAMF,WAAWuC,KAAI,SAACN,EAAkBO,GAAnB,OAClB,kBAAC,EAAD,CAAYC,IAAKD,EAAOrB,UAAW,CAACc,SAAUA,U,uxCCpB9D,IAAMS,EAAW1B,IAAO2B,GAAV,KAMRC,EAAW5B,IAAO6B,GAAV,KAMRC,EAAkB9B,IAAO+B,IAAV,KAKfC,EAAahC,IAAO+B,IAAV,KAMVE,EAAoBjC,IAAO+B,IAAV,KAajBG,EAAqBlC,IAAOmC,EAAV,KAKlBC,EAAkBpC,IAAOqC,IAAV,KAiCNC,EA1BH,WACR,IAAMpD,EAAQO,IACR8C,EAAWrD,EAAMJ,MAAM0D,OAAS,EAEtC,OACI,gBAACV,EAAD,KACI,gBAACJ,EAAD,KACI,wBAAMe,KAAK,MAAMC,aAAW,qBAA5B,gBADJ,kBAIA,gBAACV,EAAD,KACI,gBAACC,EAAD,KAAoB/C,EAAMJ,MAAMyD,GAAUxD,OAG9C,gBAAC6C,EAAD,MAGA,gBAAC,EAAD,MAEA,gBAACM,EAAD,CAAoBS,KAAK,4CAA4CC,MAAM,SAASC,OAAO,UACvF,gBAACT,EAAD,CAAiBU,IAAKC,IAAaC,IAAI,mBCrEjDC,EAAS,IAAIC,eAAa,CAC9BC,IAAK,gCACLC,MAAO,IAAIC,kBAKbC,SACI,gBAAC,iBAAD,CAAgBL,OAAQA,GACpB,gBAACzD,EAAD,KACI,gBAAC,EAAD,QAGR+D,SAASC,eAAe,W","file":"static/js/main.48f49489.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github_logo.8903f682.svg\";","import { useReducer } from 'react'\nimport { createContainer } from 'react-tracked'\n\ntype Joke = {\n    text: string\n}\n\ntype State = {\n    jokes: Joke[],\n    categories: string[]\n}\n\ntype Action = \n  | { type: 'ADD_JOKE'; payload: string }\n  | { type: 'ADD_CATEGORY'; payload: string[] }\n\nconst initialState: State = {\n    jokes: [\n        {\n            text: 'Select a category from below'\n        }\n    ],\n    categories: []\n}\n\nconst reducer = (state: State, action: Action) => {\n    switch(action.type) {\n        case 'ADD_JOKE':\n            return {\n                ...state,\n                jokes: [\n                    ...state.jokes,\n                    {\n                        text: action.payload\n                    }\n                ]\n            }\n        case 'ADD_CATEGORY':\n            return {\n                ...state,\n                categories: [...state.categories, ...action.payload]\n            }\n        default:\n            return state;\n    }\n}\n\nconst useValue = () => useReducer(reducer, initialState);\n\nexport const {\n  Provider,\n  useTrackedState,\n  useUpdate: useDispatch\n} = createContainer(useValue);\n","import { gql } from '@apollo/client'\n\n// Query to get all joke categories - returns array of strings\nexport const GET_ALL_CATEGORIES = gql`\n    query {\n      categories\n    }\n`\n\n// Query which takes a variable/argument called 'category'\n// and returns the joke via value field\nexport const GET_A_JOKE = gql`\n    query GetAJoke($category: String!) {\n        joke(category: $category) {\n            value\n        }\n    }\n`\n","import * as React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { GET_A_JOKE } from '../queries'\nimport { useDispatch } from '../store'\nimport styled from 'styled-components'\n\n// Disabled when 'loading'. Focus style for mouse/keyboard/touch\nconst StyledButton = styled.button`\n    background-color: rgba(255, 99, 71, 0.8);\n    color: white;\n    border: none;\n    border-radius: 1rem;\n    padding: 0.5rem 2rem;\n    margin: 0.5rem;\n    font-size: 16px;\n    font-size: clamp(1rem, 2.5vw, 2rem);\n    text-transform: capitalize;\n    box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.1);\n    transition: all 0.2s ease 0s;\n    &:hover,&:focus {\n        background-color: rgba(255, 99, 71, 1);\n        transform: translateY(-3px);\n        box-shadow: 0px 5px 20px rgba(0, 0, 0, 0.3);\n    }\n    &:focus {\n        outline: none;\n    }\n    &:disabled {\n        background-color: rgba(255, 99, 71, 0.3);\n    }\n`\n\ntype Props = {\n    variables: {\n        category: string\n    }\n}\n\ntype QueryResponse = {\n    data: {\n        joke: {\n            value: string\n        }\n    }\n}\n\n// Creates a button which can query GET_A_JOKE\nconst JokeButton = ({ variables }: Props): JSX.Element => {\n    //  Hook for resolving the GET_A_JOKE query\n    const {loading, refetch} = useQuery(GET_A_JOKE, { variables: variables });\n    const dispatch = useDispatch()\n\n    // Return button that refetches onClick to load new data\n    return (\n        <StyledButton disabled={loading} onClick={() => {\n            refetch()\n            .then(({data}: QueryResponse) => dispatch({ type: 'ADD_JOKE', payload: data.joke.value }))\n            .catch(error => console.error(error))\n        }}>\n            {variables.category}\n        </StyledButton>\n    )\n}\n\nexport default JokeButton\n","import React, { useState, useEffect } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { GET_ALL_CATEGORIES } from '../queries'\nimport { useDispatch, useTrackedState } from '../store'\nimport JokeButton from './JokeButton'\n\nconst CategoryList = (): JSX.Element => {\n    // Hook for resolving the GET_ALL_CATEGORIES query\n    const {loading, error, data} = useQuery(GET_ALL_CATEGORIES)\n    // Wait for data, then dispatch categories\n    const [firstLoad, setFirstLoad] = useState(true)\n    const dispatch = useDispatch()\n    const state = useTrackedState()\n\n    useEffect(() => {\n        if (firstLoad && data) {\n            dispatch({ type: 'ADD_CATEGORY', payload: data.categories })\n            setFirstLoad(false)\n        }\n    }, [firstLoad, data, dispatch])\n\n    if (loading) return <p>Loading Categories...</p>\n    if (error) return <p>API's have errors - Chuck doesn't. <br />\n                        Perhaps you meant <code>npm run dev</code></p>\n\n    return (\n        <div>\n            {state.categories.map((category: string, index: number) => (\n                <JokeButton key={index} variables={{category: category}} />\n            ))}\n        </div>\n    )\n}\n\nexport default CategoryList\n","import * as React from 'react'\nimport { useTrackedState } from './store'\nimport CategoryList from './components/CategoryList'\nimport styled from 'styled-components'\nimport github_logo from './assets/github_logo.svg'\nimport './index.css'\n\n// Styled H1 serving as a banner\nconst StyledH1 = styled.h1`\n    margin: 4vmin;\n    padding-bottom: 4vmin;\n    border-bottom: 3px solid  rgba(255, 99, 71, 0.8);\n`\n// Styled horizontal bar\nconst StyledHr = styled.hr`\n    margin: 4vmin;\n    border: none;\n    border-top: 3px solid  rgba(255, 99, 71, 0.8);\n`\n// Styled div to provide a max-width for desktops\nconst StyledContainer = styled.div`\n    max-width: 1080px;\n    text-align: center;\n`\n// Styled card for centering the joke\nconst StyledCard = styled.div`\n    display: grid;\n    padding: 2vmin 0;\n    place-content: center;\n`\n// Stylized joke text\nconst StyledCardContent = styled.div`\n    box-sizing: border-box;\n    display: grid;\n    place-content: center;\n    max-width: 600px;\n    padding: 2rem;\n    margin: 0 1rem;\n    min-height: 4rem;\n    font-size: 16px;\n    font-size: clamp(1rem, 2.5vmax, 2rem);\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19),\n                0 6px 6px rgba(0,0,0,0.23);\n`\nconst StyledGitHubAnchor = styled.a`\n    position: absolute;\n    bottom: 3vmin;\n    left: 5vmin;\n`\nconst StyledGitHubImg = styled.img`\n    width: 5vmin;\n    min-width: 2rem;\n    height: 5vmin;\n    min-height: 2rem;\n`\n\nconst App = (): JSX.Element => {\n    const state = useTrackedState()\n    const position = state.jokes.length - 1\n\n    return (\n        <StyledContainer>\n            <StyledH1>\n                <span role=\"img\" aria-label=\"Bearded Man Emoji\">ðŸ§”</span> - Chuck Facts\n            </StyledH1>\n            \n            <StyledCard>\n                <StyledCardContent>{state.jokes[position].text}</StyledCardContent>\n            </StyledCard>\n\n            <StyledHr />\n\n            {/* Query for categories & create buttons */}\n            <CategoryList />\n\n            <StyledGitHubAnchor href=\"https://github.com/joematune/repobot-test\" title=\"GitHub\" target=\"_blank\">\n                <StyledGitHubImg src={github_logo} alt=\"GitHub Logo\"></StyledGitHubImg>\n            </StyledGitHubAnchor>\n        </StyledContainer>\n    )\n}\n\nexport default App\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client'\nimport App from './App'\nimport { Provider } from './store'\n\n// An instance of ApolloClient defining the base URI and cache policy\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql',\n  cache: new InMemoryCache()\n});\n\n// ApolloProvider giving access to the client via ApolloConsumer\n// Store Provider giving access to Global storage\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <Provider>\n            <App />\n        </Provider>\n    </ApolloProvider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}